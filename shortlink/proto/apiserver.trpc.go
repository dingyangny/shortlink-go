// Code generated by trpc-go/trpc-cmdline v1.0.9. DO NOT EDIT.
// source: apiserver.proto

package proto

import (
	"context"
	"errors"
	"fmt"

	common "github.com/dingyangny/shortlink-go/shortlink/proto/common"
	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// ShortlinkService defines service.
type ShortlinkService interface {
	Health(ctx context.Context, req *common.CommonReq) (*common.CommonRsp, error)
}

func ShortlinkService_Health_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &common.CommonReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(ShortlinkService).Health(ctx, reqbody.(*common.CommonReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// ShortlinkServer_ServiceDesc descriptor for server.RegisterService.
var ShortlinkServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.dingyangny.shortlink.Shortlink",
	HandlerType: ((*ShortlinkService)(nil)),
	Methods: []server.Method{
		{
			Name: "/trpc.dingyangny.shortlink.Shortlink/Health",
			Func: ShortlinkService_Health_Handler,
		},
	},
}

// RegisterShortlinkService registers service.
func RegisterShortlinkService(s server.Service, svr ShortlinkService) {
	if err := s.Register(&ShortlinkServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("Shortlink register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedShortlink struct{}

func (s *UnimplementedShortlink) Health(ctx context.Context, req *common.CommonReq) (*common.CommonRsp, error) {
	return nil, errors.New("rpc Health of service Shortlink is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// ShortlinkClientProxy defines service client proxy
type ShortlinkClientProxy interface {
	Health(ctx context.Context, req *common.CommonReq, opts ...client.Option) (rsp *common.CommonRsp, err error)
}

type ShortlinkClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewShortlinkClientProxy = func(opts ...client.Option) ShortlinkClientProxy {
	return &ShortlinkClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *ShortlinkClientProxyImpl) Health(ctx context.Context, req *common.CommonReq, opts ...client.Option) (*common.CommonRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.dingyangny.shortlink.Shortlink/Health")
	msg.WithCalleeServiceName(ShortlinkServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("dingyangny")
	msg.WithCalleeServer("shortlink")
	msg.WithCalleeService("Shortlink")
	msg.WithCalleeMethod("Health")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &common.CommonRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
